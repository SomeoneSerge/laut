// Type declarations
.type Hash <: symbol                   // Base type for all hashes
.type UnresolvedInputHash <: Hash     // Hash of unresolved derivation
.type ResolvedInputHash <: Hash       // Hash of resolved derivation
.type ContentHash <: Hash             // Content hash of build output

// Input relations
.decl unresolvedDeps(unresolvedDrv: UnresolvedInputHash, dependsOn: UnresolvedInputHash)
.input unresolvedDeps(IO="file", filename="unresolved_deps.facts")

// Maps unresolved to resolved derivations
.decl derivationResolution(unresolvedDrv: UnresolvedInputHash, resolvedDrv: ResolvedInputHash)
.input derivationResolution(IO="file", filename="drv_resolutions.facts")

// Maps dependencies between resolved derivations while preserving context
.decl resolvedDependency(resolvedDrv: ResolvedInputHash, 
                         unresolvedDep: UnresolvedInputHash, 
                         dependsOnResolved: ResolvedInputHash)
.input resolvedDependency(IO="file", filename="resolved_deps.facts")

.decl builds(resolvedDrv: ResolvedInputHash, outputHash: ContentHash)
.input builds(IO="file", filename="builds.facts")

// Intermediate relations
// Track which resolved derivations can be built to which outputs
.decl buildOutput(resolvedDrv: ResolvedInputHash, outputHash: ContentHash)

// Output relation - final result combining all information
.decl finalOutput(unresolvedDrv: UnresolvedInputHash, resolvedDrv: ResolvedInputHash, outputHash: ContentHash)
.output finalOutput(IO="file", filename="output.facts")

// Rules

// Connect resolved derivations to their build outputs
buildOutput(resolved, outputHash) :-
    builds(resolved, outputHash).

// Generate final output combining all information
finalOutput(unresolved, resolved, outputHash) :-
    derivationResolution(unresolved, resolved),
    buildOutput(resolved, outputHash).

// Verification Rules

// 1. Verify that all unresolved derivations have a resolution
.decl unresolvedDrvWithoutResolution(unresolvedDrv: UnresolvedInputHash)
unresolvedDrvWithoutResolution(drv) :-
    unresolvedDeps(drv, _),
    !derivationResolution(drv, _).

unresolvedDrvWithoutResolution(drv) :-
    unresolvedDeps(_, drv),
    !derivationResolution(drv, _).

// 2. Verify that all dependencies in unresolved_deps are reflected in resolved dependencies
.decl missingResolvedDependency(resolvedDrv: ResolvedInputHash, unresolvedDrv: UnresolvedInputHash, 
                              unresolvedDep: UnresolvedInputHash)
missingResolvedDependency(resolvedDrv, unresolvedDrv, unresolvedDep) :-
    derivationResolution(unresolvedDrv, resolvedDrv),
    unresolvedDeps(unresolvedDrv, unresolvedDep),
    !resolvedDependency(resolvedDrv, unresolvedDep, _).

// 3. Verify that all dependencies in resolved_dependencies correspond to actual unresolved dependencies
.decl unexpectedResolvedDependency(resolvedDrv: ResolvedInputHash, unresolvedDrv: UnresolvedInputHash, 
                                 unresolvedDep: UnresolvedInputHash)
unexpectedResolvedDependency(resolvedDrv, unresolvedDrv, unresolvedDep) :-
    derivationResolution(unresolvedDrv, resolvedDrv),
    resolvedDependency(resolvedDrv, unresolvedDep, _),
    !unresolvedDeps(unresolvedDrv, unresolvedDep).

// 4. Verify that all resolved dependencies point to actual resolved derivations
.decl invalidResolvedDependency(resolvedDrv: ResolvedInputHash, unresolvedDep: UnresolvedInputHash, 
                              dependsOnResolved: ResolvedInputHash)
invalidResolvedDependency(resolvedDrv, unresolvedDep, dependsOnResolved) :-
    resolvedDependency(resolvedDrv, unresolvedDep, dependsOnResolved),
    !derivationResolution(unresolvedDep, dependsOnResolved).

// 5. Verify that all resolved derivations have builds
.decl missingBuild(resolvedDrv: ResolvedInputHash)
missingBuild(resolvedDrv) :-
    derivationResolution(_, resolvedDrv),
    !builds(resolvedDrv, _).

missingBuild(dependsOnResolved) :-
    resolvedDependency(_, _, dependsOnResolved),
    !builds(dependsOnResolved, _).

// Output verification relations
.output unresolvedDrvWithoutResolution(IO="file", filename="unresolved_without_resolution.facts")
.output missingResolvedDependency(IO="file", filename="missing_resolved_deps.facts")
.output unexpectedResolvedDependency(IO="file", filename="unexpected_resolved_deps.facts")
.output invalidResolvedDependency(IO="file", filename="invalid_resolved_deps.facts")
.output missingBuild(IO="file", filename="missing_builds.facts")